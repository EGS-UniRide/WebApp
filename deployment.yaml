# Create nginx service
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: nginx-service-uniride
#  namespace: egs-uniride
#spec:
#  ports:
#  - port: 80
#    targetPort: 80
#  selector:
#    app: nginx-service-uniride
#---
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: react-api
  namespace: egs-uniride
spec:
  selector:
    matchLabels:
      app: react-api
  template:
    metadata:
      labels:
        app: react-api
    spec:
      containers:
        - name: react-api
          image: registry.deti:5000/egs-uniride/webapp:0007
          ports:
            - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: react-api
  namespace: egs-uniride
spec:
  ports:
    - protocol: TCP
      port: 3000
      name: react-api-svc-port 
  selector:
    app: react-api
  type: ClusterIP
---
#apiVersion: v1
#kind: Service
#metadata:
#  name: react-app-service
#  namespace: egs-uniride
#  labels:
#    app: react-app
#spec:
#  type: LoadBalancer
#  ports:
#    - port: 3000
#      targetPort: 3000
#      protocol: TCP
#  selector:
#    app: react-api
#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: nginx-uniride
#  namespace: egs-uniride
#spec:
#  replicas: 2
#  selector:
#    matchLabels:
#      app: nginx-uniride
#  strategy: {}
#  template:
#    metadata:
#      labels:
#        app: nginx-uniride
#    spec:
#      containers:
#        - image: registry.deti:5000/egs-uniride/nginx-uniride:0000
#          name: nginx-uniride
#          ports:
#            - containerPort: 80
#          resources: {}
#      restartPolicy: Always
#---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: react-app-ingress
#  namespace: egs-uniride
#  annotations:
#    kubernetes.io/ingress.class: nginx
#spec:
#  rules:
#    - host: uniride.egs
#      http:
#        paths:
#          - path: /
#            pathType: Prefix
#            backend:
#              service:
#                name: nginx-service-uniride
#                port:
#                  number: 80
